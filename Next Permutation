/*Implement the next permutation, which rearranges numbers into the numerically next greater permutation of numbers for a given array A of size N.

If such arrangement is not possible, it must be rearranged as the lowest possible order i.e., sorted in an ascending order.

Note:

1. The replacement must be in-place, do **not** allocate extra memory.
2. DO NOT USE LIBRARY FUNCTION FOR NEXT PERMUTATION. Use of Library functions will disqualify your submission retroactively and will give you penalty points.
Input Format:

The first and the only argument of input has an array of integers, A.
Output Format:

Return an array of integers, representing the next permutation of the given array.
Constraints:

1 <= N <= 5e5
1 <= A[i] <= 1e9
Examples:

Input 1:
    A = [1, 2, 3]

Output 1:
    [1, 3, 2]

Input 2:
    A = [3, 2, 1]

Output 2:
    [1, 2, 3]

Input 3:
    A = [1, 1, 5]

Output 3:
    [1, 5, 1]

Input 4:
    A = [20, 50, 113]

Output 4:
    [20, 113, 50]
Seen this question in a real interview before
   
*/
void swap(int &a, int &b){
    int temp = a;
    a = b;
    b = temp;
}

void swapWith(int num, vector<int>& A, int i){
    int min = A[i];
    int j = i, index = i;
    for(j = i; j < A.size(); j++){
        if(min > A[j] && A[j] > A[num]){
            index = j;
            min = A[j];
        }
    }
    swap(A[index], A[num]);
}

bool myFun(int i, int j){
    return i > j;
}

vector<int>Solution::nextPermutation(vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
   
    int flag = 0;
        
    for(int i = A.size()-1; i > 0; i--){
        if(A[i] > A[i-1]){
            swapWith(i-1, A, i);
            sort(A.begin()+i, A.end());
            flag = 1;
            break;
        }
    }
    
    if(flag == 0){
        sort(A.begin(), A.end());
    }
    return A;
}

   
