/*
You are given an array of N integers, A1, A2 ,…, AN. Return maximum value of f(i, j) for all 1 ≤ i, j ≤ N.
f(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.
For example,
A=[1, 3, -1]
f(1, 1) = f(2, 2) = f(3, 3) = 0
f(1, 2) = f(2, 1) = |1 - 3| + |1 - 2| = 3
f(1, 3) = f(3, 1) = |1 - (-1)| + |1 - 3| = 4
f(2, 3) = f(3, 2) = |3 - (-1)| + |2 - 3| = 5
So, we return 5.
https://www.interviewbit.com/problems/maximum-absolute-difference/
*/

######################### METHOD-1 ################################################################################
# Not so efficient for large number of elements in an array,

int find_diff(int a,int b,int c,int d)
{
    return ((abs(a-b)+abs(c-d)));
}


int Solution::maxArr(vector<int> &A) {
    
    int max_diff=0,diff=0;
    int n= A.size();
    if(A.size()==1)
    {
        return max_diff;
    }
    for(int i=0;i<n-1;i++)
    {
        diff = 0;
        for(int j=i+1;j<n;j++)
        {
            diff = find_diff(A[i],A[j],i,j);
            if(diff>max_diff)
            {
                max_diff = diff;
            }
        }
    }
    
    return max_diff;
}




############################################### METHOD_2 ######################################################################


int max(int a,int b,int c,int d)
{
     if(a>b)
     {
         return a;
     }
     else{
         b;
     }
}


int Solution::maxArr(vector<int> &A) {
    
    int sum = INT_MIN, max1 = INT_MIN, max2 = INT_MIN, min1 = INT_MAX, min2 = INT_MAX;
    
    for (auto i = 0; i < A.size(); ++i)
    {
        max1 = max(max1, A[i] + i);
        max2 = max(max2, A[i] - i);
        min1 = min(min1, A[i] + i);
        min2 = min(min2, A[i] - i);
    }
    sum = max(max1-min1, max2-min2);
    return sum;
}


### Here usese the approch that maximum difference is created when we take difference of (Largest value - smallest value )
